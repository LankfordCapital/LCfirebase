rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow users to create their own profile upon signup,
    // and read/update their own data once authenticated.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Allow authenticated users to manage their own appointments
    match /appointments/{appointmentId} {
      allow read, write: if request.auth.uid == request.resource.data.workforceMemberId || 
                            (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'borrower' && 
                             exists(/databases/$(database)/documents/users/$(request.resource.data.workforceMemberId)));
    }

    // Allow workforce members to manage internal documents
    match /workforce-docs/{docId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['workforce', 'admin'];
    }

    // Allow workforce members to manage the lender database
    match /lenders/{lenderId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['workforce', 'admin'];
    }

    // Allow workforce members to manage the AMC database
    match /amcs/{amcId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['workforce', 'admin'];
    }

    // Make chat rooms writeable by any authenticated user, but not readable.
    // In a real app you would lock this down to specific participants.
    match /chats/{roomId}/{messageId} {
        allow write: if request.auth != null;
        allow read: if request.auth != null; // Keeping this open for now for simplicity
    }
  }
}
