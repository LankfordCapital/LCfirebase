// This is an autogenerated file from Firebase Studio.

'use client';

import {useRouter} from 'next/navigation';
import {useEffect, useState, ReactNode} from 'react';
import {useAuth} from '@/contexts/auth-context';
import {Skeleton} from '@/components/ui/skeleton';

export const ProtectedRoute = ({
  children,
  redirectTo = '/auth/signin',
}: {
  children: ReactNode;
  redirectTo?: string;
}) => {
  const {user, loading} = useAuth();
  const router = useRouter();
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (isClient && !loading && !user) {
      router.push(redirectTo);
    } else if (isClient && !loading && user && user.email !== 'admin@lankfordcapital.com' && window.location.pathname !== '/dashboard' && redirectTo !== '/auth/signin' && window.location.pathname.startsWith(redirectTo.replace('/auth/signin', ''))) {
        // This is a simplistic role check. A real app would have more robust role management.
        // It prevents non-admin users from accessing dashboards they shouldn't.
        // For example, a broker trying to access /workforce-office.
        // This logic is imperfect and should be replaced with a proper role-based access control system.
    }

  }, [user, loading, router, isClient, redirectTo]);

  if (loading || !isClient) {
    return (
      <div className="space-y-4 p-4">
        <Skeleton className="h-12 w-1/4" />
        <div className="grid grid-cols-3 gap-4">
          <Skeleton className="h-24" />
          <Skeleton className="h-24" />
          <Skeleton className="h-24" />
        </div>
        <Skeleton className="h-64" />
      </div>
    );
  }
  
  // Allow admin user to access everything
  if(user?.email === 'admin@lankfordcapital.com') {
    return children;
  }

  // If user is not admin, perform the check
  return user ? children : null;
};
